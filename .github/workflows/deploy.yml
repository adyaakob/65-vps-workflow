name: Deploy to VPS Workflow

on:
  push:
    branches: 
      - 'master'
      - 'main'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Debug Repository Contents
      run: |
        echo "Repository Contents:"
        pwd
        ls -R
    
    - name: Setup SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
        SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
      run: |
        set -x  # Enable verbose output
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
        # Validate SSH key
        ssh-keygen -l -f ~/.ssh/id_ed25519 || echo "SSH Key Validation Failed"
        
        # Add passphrase to SSH key
        echo "$SSH_PASSPHRASE" | ssh-keygen -p -f ~/.ssh/id_ed25519 -N "" || echo "Passphrase Addition Failed"
        
        # Generate public key
        ssh-keygen -y -f ~/.ssh/id_ed25519 > ~/.ssh/id_ed25519.pub
        
        # Print out the public key for verification
        echo "Generated Public Key:"
        cat ~/.ssh/id_ed25519.pub
        
        # Start SSH agent and add key
        eval $(ssh-agent -s)
        echo "$SSH_PASSPHRASE" | ssh-add -k ~/.ssh/id_ed25519 || echo "SSH Key Add Failed"
        
        # Verify SSH key
        ssh-add -l
    
    - name: Comprehensive SSH Debugging
      run: |
        set -x
        echo "SSH Connection Debugging..."
        
        # Check SSH configuration
        ssh -V
        
        # Test SSH connection with verbose output
        ssh -vvvv -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o PreferredAuthentications=publickey \
            root@167.235.75.153 "echo 'Detailed SSH Connection Test'" || echo "SSH Connection Test Failed"
      continue-on-error: true
    
    - name: Deploy to VPS
      run: |
        set -x
        echo "Starting Deployment Process..."
        
        # Verify source files exist
        echo "Source Files:"
        ls -l src/
        
        # Create deployment directory
        ssh -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o PreferredAuthentications=publickey \
            root@167.235.75.153 "mkdir -p /var/www/html/dahalan.org/testworkflow/" || echo "Directory Creation Failed"
        
        # Copy files to VPS with verbose output
        scp -v -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o PreferredAuthentications=publickey \
            -r src/* root@167.235.75.153:/var/www/html/dahalan.org/testworkflow/ || echo "SCP File Transfer Failed"
        
        echo "Deployment files transferred successfully"
      
    - name: Configure Web Server
      run: |
        set -x
        echo "Configuring Web Server..."
        
        # SSH into VPS and perform server configuration
        ssh -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o PreferredAuthentications=publickey \
            root@167.235.75.153 << 'EOF'
        
        # Check Nginx configuration
        echo "Nginx Configuration Check:"
        nginx -T | grep -E "server_name|root|location"
        
        # Verify Nginx configuration
        nginx -t
        
        # Check Nginx error logs
        echo "Nginx Error Logs:"
        tail -n 50 /var/log/nginx/error.log
        
        # Check Nginx access logs
        echo "Nginx Access Logs:"
        tail -n 50 /var/log/nginx/access.log
        
        # Create or update Nginx configuration for the deployment
        cat > /etc/nginx/sites-available/dahalan.org << INNEREOF
server {
    listen 80;
    listen 443 ssl;
    server_name dahalan.org www.dahalan.org;
    
    ssl_certificate /etc/letsencrypt/live/dahalan.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dahalan.org/privkey.pem;
    
    root /var/www/html/dahalan.org/testworkflow;
    index index.html;
    
    location / {
        try_files \$uri \$uri/ =404;
    }
}
INNEREOF
        
        # Enable the site configuration
        ln -sf /etc/nginx/sites-available/dahalan.org /etc/nginx/sites-enabled/
        
        # Test and reload Nginx
        nginx -t
        systemctl reload nginx
EOF
      
    - name: Verify Deployment
      run: |
        set -x
        echo "Verifying deployment..."
        
        # Extensive debugging for deployment verification
        echo "Attempting to verify deployment..."
        
        # Perform comprehensive connectivity and content checks
        ssh -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o PreferredAuthentications=publickey \
            root@167.235.75.153 << 'EOF'
        
        # Check file permissions
        echo "File Permissions:"
        ls -l /var/www/html/dahalan.org/testworkflow/
        
        # Verify web server process
        echo "Web Server Process:"
        systemctl status nginx
        
        # Check listening ports
        echo "Listening Ports:"
        ss -tuln | grep -E ':80|:443'
EOF
        
        # Check website accessibility
        response=$(curl -sL -w "%{http_code}" https://dahalan.org/testworkflow/index.html)
        echo "Curl Response Code: $response"
        
        # Fetch the final URL after redirects
        final_url=$(curl -sL -w "%{url_effective}" https://dahalan.org/testworkflow/index.html)
        echo "Final URL after redirects: $final_url"
        
        # Verify content of the final URL
        content=$(curl -sL "$final_url")
        if [[ -n "$content" ]]; then
          echo "Deployment successful! Website is accessible."
          exit 0
        else
          echo "Deployment failed: Empty content from final URL"
          exit 1
        fi
